#!/usr/bin/env python3
"""Phoenix firmware control"""
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

import sys
import argparse
import logging
from ClusterShell.NodeSet import NodeSet
from ClusterShell.CLI.Utils import bufnodeset_cmpkey
import phoenix
import phoenix.parallel
from phoenix.node import Node

def get_parser():
    parser = argparse.ArgumentParser(description="Control the firmware of Phoenix nodes")
    parser.add_argument('nodes', default=None, type=str, help='Nodes to list')
    parser.add_argument('action', default='ver', nargs='?', type=str, help='Action')
    parser.add_argument('arguments', nargs=argparse.REMAINDER)
    parser.add_argument('-v', '--verbose', action='count', default=0)
    phoenix.parallel.parser_add_arguments_parallel(parser)
    return parser

def print_remaining(task, nodes):
    ns_ok = NodeSet()
    for rc, nodelist in task.iter_retcodes():
        ns_ok.add(NodeSet._fromlist1(nodelist))
    uncompleted_nodes = nodes - ns_ok
    print("Remaining nodes: %s (%d)" % (uncompleted_nodes, len(uncompleted_nodes)))
    return uncompleted_nodes
    
if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()

    phoenix.setup_logging(args.verbose)

    try:
        nodes = NodeSet(args.nodes)
    except Exception as e:
        logging.error(e)
        sys.exit(1)

    (task, handler) = phoenix.parallel.setup(nodes, args)
    cmd = "firmware %s" % (args.action)
    if args.arguments:
        cmd = "%s %s" % (cmd, " ".join(args.arguments))
    try:
        task.shell(cmd, nodes=nodes, handler=handler, autoclose=False, stdin=False, tree=True, remote=False)
        task.resume()
    except KeyboardInterrupt as kbe:
        print()
        nodesetify = lambda v: (v[0], NodeSet._fromlist1(v[1]))
        for buf, nodeset in sorted(map(nodesetify, task.iter_buffers()), key=bufnodeset_cmpkey):
            handler._display.print_gather(nodeset, buf)
        print_remaining(task, nodes)
    sys.exit(0)
