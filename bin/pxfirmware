#!/usr/bin/env python
"""Phoenix firmware control"""
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

import sys
import argparse
import logging
from ClusterShell.NodeSet import NodeSet
import phoenix
import phoenix.parallel
from phoenix.node import Node

def get_parser():
    parser = argparse.ArgumentParser(description="Control the firmware of Phoenix nodes")
    parser.add_argument('nodes', default=None, type=str, help='Nodes to list')
    parser.add_argument('action', default='ver', nargs='?', type=str, help='Action')
    parser.add_argument('arguments', nargs=argparse.REMAINDER)
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('-f', '--fanout', type=int, default=64, help='Fanout value')
    parser.add_argument('-t', '--command-timeout', type=int, default=0)
    parser.add_argument('-T', '--connect-timeout', type=int, default=20)
    return parser

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()

    phoenix.setup_logging(args.verbose)

    try:
        nodes = NodeSet(args.nodes)
    except Exception as e:
        logging.error(e)
        sys.exit(1)

    (task, handler) = phoenix.parallel.setup(nodes, args)
    cmd = "firmware %s" % (args.action)
    if args.arguments:
        cmd = "%s %s" % (cmd, " ".join(args.arguments))
    task.shell(cmd, nodes=nodes, handler=handler, autoclose=False, stdin=False, tree=True, remote=False)
    task.resume()

    sys.exit(0)
